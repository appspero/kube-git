/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/appwavelets/kube-git/pkg/apis/githook/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GitHookLister helps list GitHooks.
type GitHookLister interface {
	// List lists all GitHooks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GitHook, err error)
	// GitHooks returns an object that can list and get GitHooks.
	GitHooks(namespace string) GitHookNamespaceLister
	GitHookListerExpansion
}

// gitHookLister implements the GitHookLister interface.
type gitHookLister struct {
	indexer cache.Indexer
}

// NewGitHookLister returns a new GitHookLister.
func NewGitHookLister(indexer cache.Indexer) GitHookLister {
	return &gitHookLister{indexer: indexer}
}

// List lists all GitHooks in the indexer.
func (s *gitHookLister) List(selector labels.Selector) (ret []*v1alpha1.GitHook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitHook))
	})
	return ret, err
}

// GitHooks returns an object that can list and get GitHooks.
func (s *gitHookLister) GitHooks(namespace string) GitHookNamespaceLister {
	return gitHookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitHookNamespaceLister helps list and get GitHooks.
type GitHookNamespaceLister interface {
	// List lists all GitHooks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GitHook, err error)
	// Get retrieves the GitHook from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GitHook, error)
	GitHookNamespaceListerExpansion
}

// gitHookNamespaceLister implements the GitHookNamespaceLister
// interface.
type gitHookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitHooks in the indexer for a given namespace.
func (s gitHookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GitHook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitHook))
	})
	return ret, err
}

// Get retrieves the GitHook from the indexer for a given namespace and name.
func (s gitHookNamespaceLister) Get(name string) (*v1alpha1.GitHook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("githook"), name)
	}
	return obj.(*v1alpha1.GitHook), nil
}
